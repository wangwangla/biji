安卓笔记

前言
安卓是一款开源的系统，他可以使用在手机上，也可以使用在电视上，应用广泛。

目录
第一章 安卓环境介绍	5
一、 安卓系统的架构图。	5
第二章 环境搭建	5
一、 安装jdk	5
二、 安装eclipse	5
三、 安装ADT插件	5
四、 安装SDK环境	5
五、 下载各个安卓的版本库	5
六、 Eclipse指定sdk	5
第三章 开发安卓	6
1． 方式一：安装的时候，可以在控制台看到安装的信息	6
2． 方式二:使用指令的方式进行安装adb install xx,apk	6
第四章 打电话	6
一、 打电话功能的实现	6
二、 创建一个安卓的项目	6
三、 编写页面	6
四、 写Activity实现一个意旨，通过意旨给手机的打电话公共发送一个意旨	6
五、 添加一个权限	7
第五章 发送短信	7
一、 创建项目	7
二、 写页面，一个电话输入框，一个信息内容输入框	7
三、 写activity	8
四、 权限	8
第六章 文件的读取	8
一、 方式一，文件的存储方式	8
二、 方式二，sharedPreferences的存储方式	11
三、 内嵌数据库SQLite	12
第七章 ListView组件的使用	12
一、 创建项目	12
二、 书写页面	12
三、 书写Activity	13
四、 部署	13
第八章 数据的传输	13
一、 创建项目	13
二、 编写页面	13
三、 编写Activity	14
四、 部署	18
第九章 Activity 使用启动模式	18
一、 创建项目	18
二、 知识点介绍	18
第十章 Intent深入理解	19
一、 概述	19
第十一章 Activity的生命周期	21
一、 Activity的三种声明周期	21
二、 Activity的生命图谱	21
第十二章 广播的接收，实现短信的窃听、	22
一、 实现原理	22
二、 实现	22
第十三章 样式的使用	22
第十四章 编码实现软件界面	22
一、 通过代码设置页面的样式	22
二、 实现	23
第十五章 Notification的使用	24
第十六章 透明度效果	24
一、 实现	24
二、 帧动画，将一组图片按照一定的顺序播放，就形成了帧动画。	25
第十七章 Activity切换的效果	25
一、 实现	25
第十八章 指南针	27
一、 指南针实现	27

第一章 安卓环境介绍
一、安卓系统的架构图。

在最底层是手机的各种驱动，比如电影，照相机，喇叭等。
还集成了一些应用库。右边的为虚拟机，专门运行安卓的数据，这个是不可以运行class文件的。它可以使用dx将class文件转化为一个.dex文件在虚拟机上运行。
应用的框架，以后开发是在这个上面进行开发的。

第二章 环境搭建
一、安装jdk
二、安装eclipse
三、安装ADT插件
1．离线安装
（1）将ADT下载本地，引入使用。
2．在线安装
（1）输入网址安装
四、安装SDK环境 
五、下载各个安卓的版本库
六、Eclipse指定sdk
第三章 开发安卓
一、创建一个安装应用
二、Activity就是一个窗口
三、问题解决:如果创建结束出现一个红叉或者感叹号，那就修改一个文件，保存，就会重新编译，就会修复错误。
四、执行安装
1．方式一：安装的时候，可以在控制台看到安装的信息
2．方式二:使用指令的方式进行安装adb install xx,apk
第四章 打电话
一、打电话功能的实现
二、创建一个安卓的项目
三、编写页面
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="输入电话号" />
	<EditText 
	    android:layout_marginTop="40px"
	    android:layout_width="fill_parent"
	    android:layout_height="wrap_content"
	    android:id="@+id/edit"/>
	<Button 
	    android:layout_marginTop="100px"
	    android:id="@+id/btn"
	    android:layout_width="wrap_content"
	    android:layout_height="wrap_content"
	    android:text="确认"/>
四、写Activity实现一个意旨，通过意旨给手机的打电话公共发送一个意旨
public class MainActivity extends Activity {
	EditText editText =null;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		Button button = (Button)findViewById(R.id.btn);
		editText = (EditText)findViewById(R.id.edit);
		button.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				String str = editText.getText().toString();
				System.out.println(str+"==================");
				Intent intent = new Intent();
				intent.setAction("android.intent.action.CALL");
				intent.addCategory("android.intent.category.DEFAULT");
				intent.setData(Uri.parse("tel:"+str));
				startActivity(intent);
			}
		});
	}
}

五、添加一个权限
<uses-permissionandroid:name="android.permission.CALL_PHONE"></uses-permission>
补充:查看信息，通过logcat查看各种信息。
第五章 发送短信
一、创建项目
二、写页面，一个电话输入框，一个信息内容输入框
 <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="请输入电话号码" />
	<EditText 
	    android:layout_marginTop="40px"
	    android:layout_width="fill_parent"
	    android:layout_height="wrap_content"
	    android:id="@+id/tel"/>
	<TextView
	    android:layout_marginTop="110px"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="请输入短信内容" />
	<EditText 
	    android:layout_marginTop="150px"
	    android:layout_width="fill_parent"
	    android:layout_height="wrap_content"
	    android:minLines="4"
	    android:id="@+id/content"/>
	<Button 
	    android:layout_marginTop="330px"
	    android:layout_width="wrap_content"
	    android:layout_height="wrap_content"
	    android:id="@+id/btn"
	    android:text="确认"/>

三、写activity
public class MainActivity extends Activity {
	EditText phoneNum = null;
	EditText content = null;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		phoneNum = (EditText)findViewById(R.id.tel);
		content = (EditText)findViewById(R.id.content);
		Button btn = (Button)findViewById(R.id.btn);
		btn.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				String num = phoneNum.getText().toString();
				String con = content.getText().toString();
				//因为短信的发送是有字数限制的，所以使用的使用的是时候需要判断需要发生几条
				SmsManager smsManager = SmsManager.getDefault();
				ArrayList<String> lists = smsManager.divideMessage(con);
				for(String list : lists) {
					smsManager.sendTextMessage(num, null, list, null, null);
				}
				Toast.makeText(MainActivity.this, "发送成功！", Toast.LENGTH_LONG).show();
			}
		});
	}

四、权限
<uses-permission android:name="android.permission.SEND_SMS"/>


第六章 页面切换
一、页面设置
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >
    
	<ViewFlipper 
	    android:layout_width="fill_parent"
	    android:layout_height="fill_parent"
	    android:id="@+id/viewF">
		<LinearLayout 
		    android:layout_width="wrap_content"
		    android:layout_height="wrap_content"
		    android:background="#000">
		    <TextView 
		        android:layout_width="wrap_content"
		        android:layout_height="wrap_content"
		        android:text="ZZZZZZZZZZZZZZZZ"
		        android:textColor="#ffffff"/>
		</LinearLayout>
		<LinearLayout 
		    android:layout_width="wrap_content"
		    android:layout_height="wrap_content"
		    android:background="#000">
		    <TextView 
		        android:layout_width="wrap_content"
		        android:layout_height="wrap_content"
		        android:text="fllll"
		        android:textColor="#888"/>
		</LinearLayout>
		
	</ViewFlipper>
</LinearLayout>
二、逻辑
public class MainActivity extends Activity {
	private Animation l ;
	private Animation c ;
	private ViewFlipper viewFilpper;
	private float startX;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		l = AnimationUtils.loadAnimation(this, R.anim.l);
		c = AnimationUtils.loadAnimation(this, R.anim.c);
		viewFilpper = (ViewFlipper)findViewById(R.id.viewF);
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// TODO Auto-generated method stub
		if(event.getAction()==MotionEvent.ACTION_DOWN) {
			
			startX=event.getX();
		}else if(event.getAction()==MotionEvent.ACTION_UP) {
			
			float endX = event.getX();
			if(endX>startX) {
				viewFilpper.setInAnimation(l);
				viewFilpper.setOutAnimation(c);
				viewFilpper.showNext();
			}else if(endX<startX) {
				viewFilpper.setInAnimation(l);
				viewFilpper.setOutAnimation(c);
				viewFilpper.showNext();
			}
			return true;
		}
		return super.onTouchEvent(event);
	}


三、动画
<?xml version="1.0" encoding="utf-8"?>
<translate
    android:fromXDelta="0"
    android:toXDelta="100%p"
    android:duration="7000"
    xmlns:android="http://schemas.android.com/apk/res/android">
</translate>
<?xml version="1.0" encoding="utf-8"?>
<translate
    android:fromXDelta="-100%p"
    android:toXDelta="0"
    android:duration="7000"
  xmlns:android="http://schemas.android.com/apk/res/android">
</translate>


第七章 背景图
一、设置背景
（1）制作9patch图
（2）将其引入，根据数据的下大小变化图像的大小
二、页面
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="com.example.tuxing.MainActivity" >

    
    <Button
        android:background="@drawable/xx"
        android:layout_width="500px"
        android:layout_height="300px"
        android:text="xxxxx" />
    
    <Button
        android:layout_marginLeft="40px"
        android:layout_marginTop="50dp"
        android:background="@drawable/xx"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" />
</RelativeLayout>


第八章 文件的读取
一、方式一，文件的存储方式
1．创建项目
2．书写页面
<TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="文件名"/>
    <EditText 
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:id="@+id/filename"/>
    <TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="文件内容"/>
   
    <EditText 
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:id="@+id/filecontent"/>
    <Button 
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:id="@+id/save"/>
   <TextView 
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:id="@+id/show"></TextView>
3．书写Activity
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		final EditText filename = (EditText)findViewById(R.id.filename);
		final EditText filecontent = (EditText)findViewById(R.id.filecontent);
		Button button = (Button)findViewById(R.id.save);
		final TextView textView = (TextView)findViewById(R.id.show);
		button.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				String name = filename.getText().toString();
				String content = filecontent.getText().toString();
				FileService fileService = new FileService(getApplicationContext());
				try {
					fileService.save(name,content);
					Toast.makeText(MainActivity.this, "success", Toast.LENGTH_LONG).show();
					String showContent = fileService.find(name);
					textView.setText(showContent);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					Toast.makeTe xt(MainActivity.this, "success", Toast.LENGTH_LONG).show();
					e.printStackTrace();
				}
			}
		});
	}
4．书写service
public class FileService {
	private Context context;
	public FileService(Context content) {
		this.context = content;
	}
	public void save(String name, String content) throws IOException {
		// TODO Auto-generated method stub
		System.out.println(name+"=================");
		FileOutputStream fileOutputStream = context.openFileOutput(name+".txt",
				Context.MODE_PRIVATE);
		fileOutputStream.write(content.getBytes());
		fileOutputStream.close();
	}
	public String find(String name) throws IOException {
		// TODO Auto-generated method stub
		FileInputStream fileInputStream = context.openFileInput(name+".txt");
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		byte[] buffer = new byte[1024];
		int len =0 ;
		while ((len = fileInputStream.read(buffer))!=-1){
			byteArrayOutputStream.write(buffer,0,len);
		}
		byte[] data = byteArrayOutputStream.toByteArray();
		fileInputStream.close();
		return new String(data);	
	}
5．部署测试
二、方式二，sharedPreferences的存储方式
1．创建项目
2．书写页面
3．书写Activity
public class MainActivity extends Activity {
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		final EditText fileName = (EditText)findViewById(R.id.filename);
		final EditText fileContent = (EditText)findViewById(R.id.filecontent);
		Button button = (Button)findViewById(R.id.save);
		final TextView textView = (TextView)findViewById(R.id.show);
		button.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				SharePreService sharePreService = new SharePreService(getApplicationContext());
				sharePreService.save(fileName,fileContent);
				textView.setText((sharePreService.find(fileName)));
			}
		});
	}

4．书写service

public class SharePreService {

	private Context context;
	public SharePreService(Context context) {
		// TODO Auto-generated constructor stub
		this.context = context;
	}
	
	public void save(EditText fileName, EditText fileContent) {
		// TODO Auto-generated method stub
		SharedPreferences sharedPreferences = context.getSharedPreferences(fileName.getText().toString(), Context.MODE_PRIVATE);
		Editor editor = sharedPreferences.edit();
		editor.putString("filename", fileName.getText().toString());
		editor.putString("fileContent", fileContent.getText().toString());
		editor.commit();
	}
	
	public String find(EditText fileName) {
		// TODO Auto-generated method stub
		SharedPreferences sharedPreferences = context.getSharedPreferences(fileName.getText().toString(), Context.MODE_PRIVATE);
		return sharedPreferences.getString("filename", "XX");
	}
}


5．部署
三、内嵌数据库SQLite
数据库可以支持多种数据类型，数据存储的时候不需要关心定义的字段是什么，都可以存储。即使给出了数据的长度，但是也是可以 存放大于指定数据的长度。唯一的例外就是只能在主键中只能使用指定的数据类型。
用户使用App，数据在用户那里，所以数据库的创建不可以手动的创建，需要使用其自动创建，在用户第一次使用软件的时候就需要创建它。
SQLiteOpenHelper类的.getReadableDatabase()或者.getWriteableDatabase（）方法就会创建数据库。
第九章  ListView组件的使用
一、创建项目
二、书写页面
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >
    <ListView 
        android:layout_width="fill_parent"
        android:layout_height="fill_parent"
        android:id="@+id/list"></ListView>
</LinearLayout>
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="horizontal" >    
	<TextView 
	    android:layout_width="100px"
	    android:layout_height="wrap_content"
	    android:id="@+id/name"/>
	<TextView 
	    android:layout_width="100px"
	    android:layout_height="wrap_content"
	    android:id="@+id/age"/>
	<TextView 
	    android:layout_width="fill_parent"
	    android:layout_height="wrap_content"
	    android:id="@+id/other"/>
</LinearLayout>
三、书写Activity
public class MainActivity extends Activity {
	private ListView listView;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		listView = (ListView)findViewById(R.id.list);
		show();
	}

	private void show() {
		// TODO Auto-generated method stub
		List<Map<String,Object>> data = new ArrayList<Map<String, Object>>();
		//上下文  数据list<HashMap>的数据类型    源 数组  目的数组
		for(int i=0;i<60;i++) {
			Map<String,Object> map = new HashMap<String, Object>();
			map.put("name", "name");
			map.put("age", "age");
			map.put("other", "long");
			data.add(map);
		}
		SimpleAdapter simpleAdapter = new SimpleAdapter(this, data, 
				R.layout.listv, new String[] {"name","age","other"},new int[] {R.id.name,R.id.age,R.id.other});
		listView.setAdapter(simpleAdapter);
	}

四、部署
第十章 数据的传输
一、创建项目
二、编写页面
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="com.example.chuandicanshu.MainActivity" >

	<Button 
	    android:layout_width="wrap_content"
    	android:layout_height="wrap_content"
		android:onClick="opennew"
    />
</RelativeLayout>
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >
</LinearLayout>

三、编写Activity
public class MainActivity extends Activity {
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
	}
	public void opennew(View v) {
		Intent intent = new Intent();
		//方法一：
		//intent.setClass(this, OtherActivity.class);
		//方法二：
		//intent.setClassName(this, "com.example.chuandicanshu.OtherActivity");
		//方法三：
		//intent.setComponent(new ComponentName(this, OtherActivity.class));
		//方法四:
		//Intent intent = new Intent(this,OtherActivity.class);
		//激活其他应用
		intent.setClassName("com.example.chuandicanshu.MainActivity", "com.example.tupian.MainActivity");
		startActivity(intent);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
}
public class OtherActivity extends Activity {
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.other_view);
	}
}
分析页面跳转的几种方法
	   Intent intent = new Intent();
		//方法一：上下文  目标
		//intent.setClass(this, OtherActivity.class);
		//方法二：上下文  目标
		//intent.setClassName(this, "com.example.chuandicanshu.OtherActivity");
		//方法三：组件
		//intent.setComponent(new ComponentName(this, OtherActivity.class));
		//方法四:构造器里面完成
		//Intent intent = new Intent(this,OtherActivity.class);
		//激活其他应用
		intent.setClassName("com.example.chuandicanshu.MainActivity", "com.example.tupian.MainActivity");
上面介绍了页面的跳转，下来让他们带着数据跳转，在一个activity执行getIntent()，就会得到一个意图，这个意图是激活次activity的意图。
第一种传递的方式
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >
    <TextView 
        android:layout_width="fill_parent"
    	android:layout_height="wrap_content"
    	android:id="@+id/show"
    />
</LinearLayout>
intent.setClass(this, OtherActivity.class);
intent.putExtra("age", "12");
Intent intent = getIntent();
String age = intent.getStringExtra("age");
textView.setText("你的年龄是："+age+"岁");	
第二种传递的方式
public class MainActivity extends Activity {
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
	}
	public void opennew(View v) {
		Intent intent = new Intent();
		//方法一：
		//intent.setClass(this, OtherActivity.class);
		//方法二：
		//intent.setClassName(this, "com.example.chuandicanshu.OtherActivity");
		//方法三：
		//intent.setComponent(new ComponentName(this, OtherActivity.class));
		//方法四:
		//Intent intent = new Intent(this,OtherActivity.class);
		//激活其他应用
		intent.setClassName("com.example.chuandicanshu.MainActivity", "com.example.tupian.MainActivity");
		startActivity(intent);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
}
public class OtherActivity extends Activity {
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.other_view);
	}
}
分析页面跳转的几种方法
	   Intent intent = new Intent();
		//方法一：上下文  目标
		//intent.setClass(this, OtherActivity.class);
		//方法二：上下文  目标
		//intent.setClassName(this, "com.example.chuandicanshu.OtherActivity");
		//方法三：组件
		//intent.setComponent(new ComponentName(this, OtherActivity.class));
		//方法四:构造器里面完成
		//Intent intent = new Intent(this,OtherActivity.class);
		//激活其他应用
		intent.setClassName("com.example.chuandicanshu.MainActivity", "com.example.tupian.MainActivity");
上面介绍了页面的跳转，下来让他们带着数据跳转，在一个activity执行getIntent()，就会得到一个意图，这个意图是激活次activity的意图。
第一种传递的方式
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >
    <TextView 
        android:layout_width="fill_parent"
    	android:layout_height="wrap_content"
    	android:id="@+id/show"
    />
</LinearLayout>
第二种方式将数据放入到Bundle中，然后将bundle放入到intent中进行显示。
//数据传输方法二
Bundle bundle = new Bundle();
bundle.putString("age", "77");
intent.putExtras(bundle);
startActivity(intent);
获取数据的方式一
Intent intent = getIntent();
String age = intent.getStringExtra("age");
textView.setText("你的年龄是："+age+"岁");
获取数据的方式二
Intent intent = getIntent();
/*String age = intent.getStringExtra("age");*/
Bundle bundle = intent.getExtras();
String age = bundle.getString("age");
textView.setText("你的年龄是："+age+"岁");
数据在新页面执行之后，如果新的页面关闭，将新的数据返回到原来的页面。
开始的使用将返回的数据放入到intent里面
public void close(View v) {
	Intent intent = new Intent();
	intent.putExtra("result", "fauzh");
	setResult(200, intent);
	this.finish();//关闭窗口
}
在返回的页面中进行数据的返回
startActivityForResult(intent, 200);

@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
		Button button = (Button)findViewById(R.id.btn);
		button.setText(data.getStringExtra("result"));
	}

四、部署
第十一章 Activity 使用启动模式
一、创建项目
二、知识点介绍
1．启动模式一共有四种
（1）图片展示
      
默认的模式，每次都会创建一个Activity实例，并放入认为任务栈中。当点击返回的时候就会关闭一个，将下一个为栈顶。
singleTop如果任务刚好存在栈顶，就重用该实例，否则就会创建新的实例并放入栈顶，也就是不在栈顶就会创建
SingleTask如果栈中已经存在实例，那么就会使用该实例，如果在栈顶直接使用，如不在栈顶那么就将上面的移除，如果不存在，那么就创建。
singleInstance对于某些实例，让多个应用共享该栈中的实例，一旦该实例存在，那么就会重用它。
第十二章 Intent深入理解
一、概述
1．它是作为组件的跳转
2．它可以激活：活动、服务、广播接受者。
3．意图分为显示意图和隐式意图
（1）明确指定了视图名称的是显示的意图。
（2）没有明确指定组件名称的是隐式意图。
① 隐式意图会根据action、category、data进行匹配
② 案例
1）创建项目
2）书写页面
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="com.example.intent.MainActivity" >
	<Button 
	    android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="tao"
        android:onClick="open"/>
</RelativeLayout>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="com.example.intent.MainActivity" >
	<TextView 
	    android:layout_width="match_parent"
    	android:layout_height="match_parent"
    	android:text="XXXX"
    />
</RelativeLayout>
3）书写Activity
public class MainActivity extends Activity {
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
	}

	public void open(View v) {
		Intent intent = new Intent();
		intent.setAction("android.intent.action.other");
		intent.addCategory("android.intent.category.other");
		startActivity(intent);
	}
}
public class OtherActivity extends Activity{	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.other_main);
	}	
}
非常关键的一点
        <activity
            android:name=".MainActivity"
            android:label="@string/app_name" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
		<activity
            android:name=".OtherActivity"
            android:label="xin" >
            <intent-filter>
                <action android:name="android.intent.action.other" />
                <category android:name="android.intent.category.other" />
                <!--除了上门的两个，这个时候还需一个默认的，这是必须  -->
                <category android:name="android.intent.category.DEFAULT" />
             </intent-filter>
        </activity>
	</application>
没有参数的情况下，只有意图中的action和category都出现在过滤器中就可以被匹配。
如果有参数的情况，那么就将其设置schame和参数的格式就可以了
<data android:scheme="kw" android:host="kang"/>
public void open(View v) {
		Intent intent = new Intent();
		intent.setAction("android.intent.action.other");
		intent.addCategory("android.intent.category.other");
		intent.setData(Uri.parse("kw://kang/sss"));
		startActivity(intent);
	}
在安卓中，可以设置数据的匹配规则，
第十三章 Activity的生命周期
一、Activity的三种声明周期
1．运行状态，处于最前端，可以响应用户的请求。
2．暂停状态，就是处于当弹出框这种虽然覆盖，但是并未将其完全覆盖掉的情况。
3．停止状态，一个Activity将其下面的Activity覆盖掉的情况就处于暂停状态。

上面的几种状态会有7个方法调用。
二、Activity的生命图谱
1．图
分析：首先创建的时候会调用onCreate方法,这个方法会创建一个Activity，然后onstart将页面启动，执行到onResume方法的时候会将其放置到最前端，可以进行交互，假如创建了一个Activity就会将其覆盖，这个时候执行的是onPause方法，当上面的activity处理结束后就会将其显示在最前端，当完全覆盖的时候就会执行onstop方法，处于停止状态，如果内存不足的情况就会将其销毁，再次显示的时候就会重新创建一个。

第十四章 广播的接收，实现电话的拦截	
一、实现原理
1．当打电话的时候，会发出一条广播，Intent存储了短信的内容
二、实现
1．创建一个广播，通过清单文件注册广播，进行短信拦截将短信发送到指定的服务器。
package com.example.tellanjie;

import android.R.anim;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;

public class PhoneBroadcastReceiver extends BroadcastReceiver{
	/**
	 * 如果操作的是动态数据，将数据存储在Intent中。
	 */
	
	@Override
	public void onReceive(Context context, Intent intent) {
		// TODO Auto-generated method stub
	
		String number = getResultData();
		System.out.println("======================");
        if("1008611".equals(number)){
            setResultData(null);//挂断
        }else{
            number = "12593"+ number; //其他，则加区号
            setResultData(number);
        }
	}
}

<receiver android:name=".PhoneBroadcastReceiver">
            <intent-filter android:priority="1000">
                <action android:name="android.intent.action.NEW_OUTGOING_CALL"/>
                <action android:name="android.intent.action.PHONE_STATE"/>   
            </intent-filter>
        </receiver>

第十五章 样式的使用
一、样式可以一个一个设置，也可以同时设置，使用的时候只需要引入就可以了。
二、案例
    <TextView
        style="@style/text"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/hello_world" />
<style name="text">
	    <item name="android:textSize">50px</item>
	    <item name="android:textColor">#666</item>
	</style>
样式的继承
    <TextView
        style="@style/child"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/hello_world" />
<style name="child" parent="text">
	    <item name="android:background">#aaa</item>
	</style>
继承的方式二
<style name="text.child">
	    <item name="android:background">#aaa</item>
	</style>
主题是设置整个界面的样式，他和样式一样设置，但是他的操作是通过在清单中引用的。
第十六章 手势
一、实现，将手势录入，然后在下次进行匹配
二、实现
1．权限
<uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<activity android:name=".PipeiActivity"></activity>
<activity android:name=".SaveActivity"></activity>
<activity android:name=".Show"></activity>

2．页面设置
（1）主页面
<?xml version="1.0" encoding="utf-8"?>   
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"   
    android:layout_width="match_parent"   
    android:layout_height="match_parent"   
    android:orientation="vertical" >   
    <Button 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:onClick="save"
        android:text="录入"/>
    <Button 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:onClick="pipei"
        android:text="匹配"/> 
    <Button 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:onClick="show"
        android:text="展示"
        />
    <TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:id="@+id/test"
        />
</LinearLayout>

3．录入
<?xml version="1.0" encoding="utf-8"?>   
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"   
    android:layout_width="match_parent"   
    android:layout_height="match_parent"   
    android:orientation="vertical" >   
    <TextView   
        android:layout_width="match_parent"   
        android:layout_height="wrap_content"   
        android:gravity="center_horizontal"   
        android:text="请在下面屏幕上绘制手势" />   
    <!-- android:gestureStrokeType手势是否需要一笔完成-->   
    <android.gesture.GestureOverlayView   
        android:id="@+id/gesture"   
        android:layout_width="match_parent"   
        android:layout_height="match_parent"   
        android:gestureStrokeType="multiple" />   
</LinearLayout>   
<?xml version="1.0" encoding="utf-8"?>   
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"   
    android:layout_width="match_parent"   
    android:layout_height="match_parent"   
    android:orientation="vertical" >   
    <LinearLayout   
        android:layout_width="match_parent"   
        android:layout_height="wrap_content"   
        android:orientation="horizontal" >   
        <TextView   
            android:layout_width="wrap_content"   
            android:layout_height="wrap_content"   
            android:layout_marginRight="8dip"   
            android:text="请输入手势名称" />   
        <!-- 定义一个文本框让用户输入手势名 -->   
        <EditText   
            android:id="@+id/gesture_name"   
            android:layout_width="match_parent"   
            android:layout_height="wrap_content" />   
    </LinearLayout>   
    <!-- 定义一个图片框来显示手势 -->   
    <ImageView   
        android:id="@+id/show"   
        android:layout_width="match_parent"   
        android:layout_height="128dp"   
        android:layout_marginTop="10dp"   
        android:layout_weight="0.29" />   
</LinearLayout>  

4．匹配
<?xml version="1.0" encoding="utf-8"?>   
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"   
    android:layout_width="match_parent"   
    android:layout_height="match_parent"   
    android:orientation="vertical" >   
    <android.gesture.GestureOverlayView   
        android:id="@+id/gesture"   
        android:layout_width="match_parent"   
        android:layout_height="match_parent"   
        android:gestureStrokeType="multiple" />   
</LinearLayout> 

5．逻辑保存
public class SaveActivity extends Activity {   
    EditText editText;   
    GestureOverlayView gestureOverlayView;   
   
    @Override   
    protected void onCreate(Bundle savedInstanceState) {   
        super.onCreate(savedInstanceState);   
        setContentView(R.layout.sava);   
        
        // 获取手势编辑视图   
        gestureOverlayView = (GestureOverlayView) findViewById(R.id.gesture);   
        // 设置手势绘图的颜色   
        gestureOverlayView.setGestureColor(Color.RED);   
        // 设置手势的绘制宽度   
        gestureOverlayView.setGestureStrokeWidth(4);   
        // 为gesture的手势完成事件绑定事件监听器   
        gestureOverlayView.addOnGesturePerformedListener(new OnGesturePerformedListener() {   
   
        @Override   
        public void onGesturePerformed(GestureOverlayView overlay,final Gesture gesture) {   
            // 加载save.xml界面布局代表的视图   
            View saveDialog = getLayoutInflater().inflate(R.layout.save, null);   
            // 获取saveDialog里的show组件   
            ImageView imageView = (ImageView) saveDialog.findViewById(R.id.show);   
            // 获取saveDialog的gesture_name组件   
            final EditText gestureEditText = (EditText) saveDialog.findViewById(R.id.gesture_name);   
           // 根据Gesture包含的手势创建一个位图   
            Bitmap bitmap = gesture.toBitmap(128, 128, 10,0xffff0000);   
            imageView.setImageBitmap(bitmap);   
            // 使用对话框显示saveDialog组件   
            new AlertDialog.Builder(SaveActivity.this).setView(saveDialog).setPositiveButton("保存", new OnClickListener() {   
                @Override   
                public void onClick(DialogInterface dialog,int which) {   
                   // 获取制定文件对应的手势库   
                   GestureLibrary guestureLibrary = GestureLibraries.fromFile(Environment   
.getExternalStorageDirectory().getPath()+ "/mygestures");   
                  // 添加手势   
                  guestureLibrary.addGesture(gestureEditText.getText().toString(), gesture);
                  guestureLibrary.removeEntry("test");
                  guestureLibrary.save();   
                  guestureLibrary.removeEntry("test");
                }   
           }).setNegativeButton("取消", null).show(); }   
        });   
    }   
}   

6．逻辑匹配
package com.example.shoushi;

import java.util.ArrayList;

import android.app.Activity;
import android.app.AlertDialog;
import android.gesture.Gesture;
import android.gesture.GestureLibraries;
import android.gesture.GestureLibrary;
import android.gesture.GestureOverlayView;
import android.gesture.Prediction;
import android.gesture.GestureOverlayView.OnGesturePerformedListener;
import android.os.Bundle;
import android.os.Environment;
import android.widget.ArrayAdapter;
import android.widget.Toast;

public class PipeiActivity extends Activity {

    // 定义手机编辑组件   
    GestureOverlayView gestureOverlayView;   
    // 记录手机上已有的手势库   
    GestureLibrary gestureLibrariLibrary;   
   
    @Override   
    protected void onCreate(Bundle savedInstanceState) {   
        super.onCreate(savedInstanceState);   
        setContentView(R.layout.pipei);   
        //
        gestureOverlayView = (GestureOverlayView) findViewById(R.id.gesture);   
        gestureLibrariLibrary = GestureLibraries.fromFile(Environment.getExternalStorageDirectory().getPath() + "/mygestures");   
   
        if (gestureLibrariLibrary.load()) {   
            Toast.makeText(PipeiActivity.this, "手势文件装在成功", Toast.LENGTH_LONG).show();   
        } else {   
            Toast.makeText(PipeiActivity.this, "手势文件装在失败", Toast.LENGTH_LONG).show();   
        }   
   
        // 定义手势编辑组件绑定监听器   
        gestureOverlayView.addOnGesturePerformedListener(new OnGesturePerformedListener() {   
   
        @Override   
        public void onGesturePerformed(GestureOverlayView overlay,Gesture gesture) {   
            // 识别用户刚刚所绘制的手势   
            ArrayList<Prediction> predictions = gestureLibrariLibrary.recognize(gesture);   
            
            ArrayList<String> result = new ArrayList<String>();   
            // 遍历所有找到的Prediction对象   
            for (Prediction prediction : predictions) {   
                // 只有相似度大于0.2的手势才会被输出   
                if (prediction.score > 0.2) {   
                    result.add("与手势{" + prediction.name + "}相似度为:"+ prediction.score);   
                }   
            }   
   
            if (result.size() > 0) {   
                ArrayAdapter<Object> arrayAdapter = new ArrayAdapter<Object>(PipeiActivity.this,   
android.R.layout.simple_dropdown_item_1line,   
                result.toArray());   
                new AlertDialog.Builder(PipeiActivity.this).setAdapter(arrayAdapter, null).setPositiveButton("确定", null).show();   
            } else {   
               Toast.makeText(PipeiActivity.this, "无法能找到匹配的手势",   
               Toast.LENGTH_LONG).show();   
            }   
        }});   
    }   
}  

7．主逻辑
package com.example.shoushi;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Environment;
import android.view.View;
import android.widget.TextView;

public class MainActivity extends Activity {   
    @Override   
    protected void onCreate(Bundle savedInstanceState) {   
        super.onCreate(savedInstanceState);   
        setContentView(R.layout.activity_main);
        TextView textView = (TextView)findViewById(R.id.test);
        textView.setText(Environment.getExternalStorageDirectory().getPath());
    }   
    public void save(View v){
    	Intent intent = new Intent(MainActivity.this,SaveActivity.class);
    	startActivity(intent);
    }
    public void pipei(View v){
    	Intent intent = new Intent(MainActivity.this,PipeiActivity.class);
    	startActivity(intent);	
    }
    public void show(View v) {
    	Intent intent = new Intent(MainActivity.this,Show.class);
    	startActivity(intent);		
    }
}  

第十七章 编码实现软件界面
一、通过代码设置页面的样式
二、实现
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		LinearLayout layout = new LinearLayout(this);
		layout.setOrientation(LinearLayout.VERTICAL);		
		TextView textView = new TextView(this);
		textView.setText("XXXXXXXXXXXXXXXX");
		ViewGroup.LayoutParams tLayoutParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.FILL_PARENT);
		layout.addView(textView, tLayoutParams);
		ViewGroup.LayoutParams lLayoutParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.FILL_PARENT);
		setContentView(layout,lLayoutParams);
	}
混编码
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >
    
	<TextView 
	    android:layout_width="wrap_content"
	    android:layout_height="wrap_content"
	    android:text="jjjjjjjjjjjjjjjjjjj"/>
</LinearLayout>

public class MainActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		LinearLayout layout = new LinearLayout(this);
		layout.setOrientation(LinearLayout.VERTICAL);
		
		TextView textView = new TextView(this);
		textView.setText("XXXXXXXXXXXXXXXX");
		
		ViewGroup.LayoutParams tLayoutParams = new ViewGroup
				.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,
						ViewGroup.LayoutParams.WRAP_CONTENT);
		layout.addView(textView, tLayoutParams);
		ViewGroup.LayoutParams lLayoutParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.FILL_PARENT);
		layout.addView(getUI());
		setContentView(layout,lLayoutParams);
	}
	public View getUI() {
		LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		return inflater.inflate(R.layout.activity_main, null);
	}


第十八章 Notification的使用
一、Notification是一种全局的效果通知，可以在系统栏显示，当App向系统发生通知时，将其显示
第十九章 透明度效果
一、实现
<?xml version="1.0" encoding="utf-8"?>
<alpha
    android:fromAlpha="1.0" xmlns:android="http://schemas.android.com/apk/res/android"
    android:toAlpha="0"
    android:duration="5000">
</alpha>
<ImageView android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:id="@+id/tu"
    android:src="@drawable/ic_launcher"/>
Animation animation = AnimationUtils.loadAnimation(this, R.anim.fist);
ImageView imageView = (ImageView)findViewById(R.id.tu);
imageView.startAnimation(animation);
<?xml version="1.0" encoding="utf-8"?>
<translate
    android:fromXDelta="0" 
    android:fromYDelta="0"
    android:toXDelta="100"
    android:toYDelta="100"
    xmlns:android="http://schemas.android.com/apk/res/android">
<!-- 平移 -->
</translate>
<?xml version="1.0" encoding="utf-8"?>
<scale
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:fromXScale="1"
    android:fromYScale="1"
    android:toXScale="100"
    android:toYScale="100"
   
    android:pivotX="50%"
    android:pivotY="50%"
    
    android:duration="7000"
    >
    <!-- 放大 -->
</scale>
<?xml version="1.0" encoding="utf-8"?>
<rotate
    android:pivotX="50%"
	android:pivotY="50%"
	android:duration="8000"
	android:fromDegrees="0"
	android:toDegrees="360"    
     xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- 旋转 -->
</rotate>
编码实现
Animation animation = new RotateAnimation(0, 360);
animation.setDuration(8000);
animation.setFillAfter(true);
ImageView imageView = (ImageView)findViewById(R.id.tu);
imageView.startAnimation(animation);
还可以混合，在一个文件中写入多个，就可以实现一个混合的动画效果。
二、帧动画，将一组图片按照一定的顺序播放，就形成了帧动画。

第二十章 Activity切换的效果
一、实现
<?xml version="1.0" encoding="utf-8"?>
<alpha
    android:fromAlpha="1"
    android:toAlpha="0"
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="10000">
</alpha>
<?xml version="1.0" encoding="utf-8"?>
<alpha 
    android:fromAlpha="0" 
    android:toAlpha="1"
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="10000">

</alpha>
public void open(View v) {
		Intent intent = new Intent(this,Second.class);
		startActivity(intent);
		this.overridePendingTransition(R.anim.enter, R.anim.leave);
	}
界面切换动画
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >
    viewFipper下的每一项都是一个页面
	<ViewFlipper 
	    android:layout_width="fill_parent"
	    android:layout_height="fill_parent"
	    android:id="@+id/viewF">
		<LinearLayout 
		    android:layout_width="wrap_content"
		    android:layout_height="wrap_content"
		    android:background="#000">
		    <TextView 
		        android:layout_width="wrap_content"
		        android:layout_height="wrap_content"
		        android:text="ZZZZZZZZZZZZZZZZ"
		        android:textColor="#ffffff"/>
		</LinearLayout>
		<LinearLayout 
		    android:layout_width="wrap_content"
		    android:layout_height="wrap_content"
		    android:background="#000">
		    <TextView 
		        android:layout_width="wrap_content"
		        android:layout_height="wrap_content"
		        android:text="fllll"
		        android:textColor="#888"/>
		</LinearLayout>
	</ViewFlipper>
</LinearLayout>
public class MainActivity extends Activity {	
	private ViewFlipper viewFilpper;
	private float startX;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		viewFilpper = (ViewFlipper)findViewById(R.id.viewF);
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// TODO Auto-generated method stub
		if(event.getAction()==MotionEvent.ACTION_DOWN) {
			startX=event.getX();
		}else if(event.getAction()==MotionEvent.ACTION_UP) {
			float endX = event.getX();
			if(endX>startX) {
				viewFilpper.showNext();
			}else if(endX<startX) {
				viewFilpper.showNext();
			}
			return true;
		}
		return super.onTouchEvent(event);
	}


第二十一章 指南针
一、指南针实现
页面设置
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="com.example.zhinanzhen.MainActivity"
    android:background="#ffffff" >
	<ImageView 
	    android:id="@+id/image"
	    android:layout_width="wrap_content"
	    android:layout_height="wrap_content"
	    android:layout_centerInParent="true"
	    android:src="@drawable/test"/>
</RelativeLayout>
代码实现
public class MainActivity extends Activity {
	private ImageView imageView ;
	private SensorManager sensorManager;
	SenorListen senorListen = new SenorListen(); 
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		imageView = (ImageView)findViewById(R.id.image);
		/*获取系统的服务*/
		sensorManager = (SensorManager)getSystemService(Context.SENSOR_SERVICE);
	}
	
	private final class SenorListen implements SensorEventListener{
		//测量出来之后执行这个方法
		@Override
		public void onAccuracyChanged(Sensor arg0, int arg1) {
			// TODO Auto-generated method stub
			 
		}
		protected float d = 0;
		@Override
		public void onSensorChanged(SensorEvent event) {
			// TODO Auto-generated method stub
sensorManager = (SensorManager)getSystemService(Context.SENSOR_SERVICE);
			float degree = event.values[0];
			RotateAnimation animation = new RotateAnimation(d, -degree,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);
			animation.setDuration(100);
			imageView.setAnimation(animation);
			d=-degree;
		}
		
	}
	
	/*Activity进入前台的时候调用*/
	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		//获取传感器
		Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);
		sensorManager.registerListener(senorListen, 
				sensor,SensorManager.SENSOR_DELAY_GAME);
		super.onResume();
		
	}
	/*Activity退出后台的时候调用*/
	@Override 
	protected void onPause() {
		// TODO Auto-generated method stub
		sensorManager.unregisterListener(senorListen);
		super.onPause();
	}
}


第二十二章 实现一个图片在线查看
一、实现步骤
1．输入一个网址，点击确定显示出图片
2．在实现的过程中，主线程不可以访问网络，会出现异常，所以只能使用子线程来访问网络，但是子线程又不可以渲染页面，这个时候需要使用主线程来进行渲染。
public void onClick(View v) {
	// TODO Auto-generated method stub
	EditText url = (EditText)findViewById(R.id.url);
	final String u = url.getText().toString();
	try {
	     System.out.println(u+"============");
		new Thread(new Runnable() {
		      public void run() {
							// TODO Auto-generated method stub
							try {
								data = ImageService.getData(u);
								for(int i=0;i<data.length;i++)
								System.out.println(data.toString());
								final Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
								
								runOnUiThread(new Runnable() {
									 
									@Override
									public void run() {
										imageView.setImageBitmap(bitmap);
									}
								});
								
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					}).start();
			

创建一个线程执行网络，使用runOnUiThread进行渲染。
二、图片显示器是实现
1．页面
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >
    <EditText 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="www.baidu.com/img/superlogo_c4d7df0a003d3db9b65e9ef0fe6da1ec.png"
        android:id="@+id/url"/>
	<Button 
	    android:layout_width="wrap_content"
	    android:layout_height="wrap_content"
	    android:text="显示图像"
	    android:id="@+id/btn"/>
	<ImageView
	    android:layout_width="wrap_content"
	    android:layout_height="wrap_content"
	    android:id="@+id/image">
	</ImageView>
</LinearLayout>
2．Activity
public class MainActivity extends Activity {
	byte []data ;
	ImageView imageView ;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		Button button = (Button)findViewById(R.id.btn);
		imageView = (ImageView)findViewById(R.id.image);
		
		button.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				EditText url = (EditText)findViewById(R.id.url);
				final String u = url.getText().toString();
				
				try {
					System.out.println(u+"============");
					new Thread(new Runnable() {
						
						@Override
						public void run() {
							// TODO Auto-generated method stub
							try {
								data = ImageService.getData(u);
								for(int i=0;i<data.length;i++)
								System.out.println(data.toString());
								final Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
								
								runOnUiThread(new Runnable() {
									 
									@Override
									public void run() {
										imageView.setImageBitmap(bitmap);
									}
								});
								
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					}).start();
					
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}	
			}
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
}


3．Service
import com.example.util.StreamTool;
public class ImageService {

	public static byte[] getData(String u) throws Exception {
		// TODO Auto-generated method stub
		//创建URL
		URL url = new URL(u);
		//得到URL的http请求
		HttpURLConnection httpURLConnection = (HttpURLConnection)
				url.openConnection();
		httpURLConnection.setConnectTimeout(5000);
		httpURLConnection.setRequestMethod("GET");
		//从请求中获取一个请求数据的输入流
		if(httpURLConnection.getResponseCode()==200)
		{
			InputStream inputStream = httpURLConnection.getInputStream();
			System.out.println(inputStream+"---------------------------------------");
			return StreamTool.read(inputStream);
		}
		return null;
	}
}

4．Utils
package com.example.util;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class StreamTool {

	public static byte[] read(InputStream inputStream) throws IOException {
		// TODO Auto-generated method stub
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		byte []b=new byte[1024];
		int len = 0 ;
		while((len=inputStream.read(b))!=-1)
		{
			byteArrayOutputStream.write(b, 0, len);
		}
		inputStream.close();
		System.out.println(byteArrayOutputStream);
		return byteArrayOutputStream.toByteArray();
	}
}

第二十三章 Web生成xml文件
一、有时候需要返回xml数据，这个时候就可以使用下面的方式进行
1．创建一个jsp文件，因为数据来自互联网，数据不知一条，那么就可使用jdtl进行循环，所以需要引入包和头
2．服务端代码
package kw.test.bean;
public class New {
	private String id;
	private String title;
	private String time;
	public New(String id, String title, String time) {
		super();
		this.id = id;
		this.title = title;
		this.time = time;
	}
	public New() {
		super();
		// TODO Auto-generated constructor stub
	}
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
	}
	public String getTime() {
		return time;
	}
	public void setTime(String time) {
		this.time = time;
	}
	
}

package kw.test.service;

import java.util.List;

import kw.test.bean.New;

public interface NewInterfaceService {

	List<New> getNewList();

}
package kw.test.service;

import java.util.ArrayList;
import java.util.List;

import kw.test.bean.New;

public class NewService implements NewInterfaceService {
	/* (non-Javadoc)
	 * @see kw.test.service.NewInterfaceService#getNewList()
	 */
	@Override
	public List<New> getNewList(){
		List<New> list = new ArrayList<New>();
		for(int i=0;i<10;i++){
			list.add(new New("iiii","XXXXXXXXXX","499"));
		}
		return list;
		
	}
}

/**
 * Servlet implementation class ListXml
 */
@WebServlet(description = "返回xml数据", urlPatterns = { "/ListXml" })
public class ListXml extends HttpServlet {
	private static final long serialVersionUID = 1L;
    private NewService newService;
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doPost(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		List<New> list = newService.getNewList();
		request.setAttribute("video", list);
		request.getRequestDispatcher("").forward(request, response);
	}
}

下来写jsp文件
<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="UTF-8"%><?xml version="1.0" encoding="UTF-8"?>
<videonews>
	<new id="1">
		<title>sss</title>
		<time>sss</time>
	</new>
</videonews>
完整的


二、如何在安卓中应用呢
1．使用Http请求，类似于获取网络图片进行访问服务器，然后对返回的数据进行解析，返回是一个list数据。然后使用适配器进行显示
三、返回json数据

页面

显示可以使用一些包可以直接转换成想要的格式，但是这个方法还是很少见的。

第二十四章 Get和post请求
一、Get请求数据是在url后面的，在这里使用的是拼接

加入上传的是中文，会出现乱码，这个时候需要在发送的时候指定，在服务端接收的时候进行编码的设置。

二、
第二十五章 get乱码解决方法
一、Get乱码解决方法一
1．获取请求参数，对请求的参数进行转码
2．New String（content.getByte(“ISO-XXX“),”UTF-8”）
二、使用过滤器
1.使用过滤器过滤所有的请求

2.对request进行包装

3.
第二十六章 自定标题
一、创建项目
二、写逻辑
@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
		setContentView(R.layout.activity_main);
		getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.title);
	}


三、创建标题样式


四、
第二十七章 